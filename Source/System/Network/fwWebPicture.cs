#region Using framework
using System.IO;
using System;
//using Microsoft.Xna.Framework;
//using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
#endregion





namespace Pluton.SystemProgram.Devices
{
    ///--------------------------------------------------------------------------------------
    using Pluton.Helper;
    ///--------------------------------------------------------------------------------------





     ///=====================================================================================
    ///
    /// <summary>
    /// Загруженная картинка из сервера
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public class AWebPicture
         :
                AWebQuery
    {
        ///--------------------------------------------------------------------------------------




        ///--------------------------------------------------------------------------------------
        private readonly string mAddress;
        
        private EStatus mStatus = EStatus.none; //текущий статус команды
        private int mCountSend = 0;             //количество попыток отправки
        private Texture2D mTexture = null;
        private bool mCache = false; //картинка загрузилась из кеша

        private int mGDHandle = 0;
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// описание текущего статуса команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public enum EStatus
        {
            none,
            idle,
            loading,
            loadingCompleted
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// constructor
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWebPicture(string address)
        {
            mAddress = address;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// возвратить  текущее значение загруженной текстуры
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static implicit operator Texture2D(AWebPicture p)
        {
            return p != null ? p.mTexture : null;
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// картинка загружена из кеша
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setCached()
        {
            mCache = true;
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// картинка загружена из кеша
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isCached()
        {
            return mCache;
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// получили адрес
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public string address
        {
            get
            {
                return mAddress;
            }
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// проверяет статус, команда запущенна илил нет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isLoading()
        {
            return mStatus == EStatus.idle || mStatus == EStatus.loading;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// проверяет статус, команда выполнела свой запрос или нет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isCompleted()
        {
            return mStatus == EStatus.loadingCompleted;
        }
        ///--------------------------------------------------------------------------------------









        ///=====================================================================================
        ///
        /// <summary>
        /// команду отправили в стек выполенения 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int sendQueue()
        {
            mStatus = EStatus.idle;
            mCountSend++;
            return mCountSend;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// начало выполнения команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void send()
        {
            mStatus = EStatus.loading;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// команда выполнилась
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void loadingCompleted(GraphicsDevice graphicsDevice, Stream stream)
        {
            mStatus = EStatus.loadingCompleted;
            loadStream(graphicsDevice, stream);
            mCountSend = 0;
            mCache = false;
            if (signal_completed != null)
            {
                signal_completed(this);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///--------------------------------------------------------------------------------------
        public delegate void eventCmd(AWebPicture pic);
        public event eventCmd signal_completed;
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// конец выполнения сообщения
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public EStatus status
        {
            get
            {
                return mStatus;
            }
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// загрузка картинки
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool loadStream(GraphicsDevice graphicsDevice, Stream stream)
        {
            /*
            try
            {
                stream.Position = 0;                    
                mTexture = Texture2D.FromStream(graphicsDevice, stream);
                mGDHandle = ASpriteBatch.GDHandle();

            }
            catch (Exception e)
            {
                mTexture = null;
                return false;
            }
            */


            /*
             UIThread.Invoke(() =>
             {
                try
                {
                    stream.Position = 0;
                    mTexture = Texture2D.FromStream(graphicsDevice, stream);
                    mGDHandle = ASpriteBatch.GDHandle();
                }
                catch (Exception)
                {
                    mTexture = null;
                }
             });
            */

            return true;
        }
        ///--------------------------------------------------------------------------------------

 

        
         ///=====================================================================================
        ///
        /// <summary>
        /// проверка, чвляется ли текстура номрально загруженная илил нет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isResetting()
        {
            if (mTexture == null)
            {
                return false;
            }

            //var p = mTexture.GetSharedHandle();


            return ASpriteBatch.isHandle(mGDHandle) ? false : true;
            
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// проверка, был резет графического девайса или нет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        /*
        protected internal override void GraphicsDeviceResetting()
        {
            mResetting = true;

        }*/



    }
}
