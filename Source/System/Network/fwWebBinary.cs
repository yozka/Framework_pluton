#region Using framework
using System;
using System.Net.Http;
using System.IO;
#endregion





namespace Pluton.SystemProgram.Devices
{
    ///--------------------------------------------------------------------------------------
    ///--------------------------------------------------------------------------------------







     ///=====================================================================================
    ///
    /// <summary>
    /// Команды отправляемые на произвольный сервер
    /// для загрузки бинарных файлов
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public class AWebBinary
            :
                AQuery
    {
        ///--------------------------------------------------------------------------------------
        private string mUrl         = string.Empty;
        private Object mUserData    = null;
        private Stream mStream      = null;
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// constructor
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWebBinary()
        {

        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// constructor
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWebBinary(string url)
        {
            mUrl = url;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// пользовательские данные
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Object userData
        {
            get
            {
                return mUserData;
            }

            set
            {
                mUserData = value;
            }
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// установка адреса для отправки
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setUrl(string url)
        {
            mUrl = url;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// начало выполнения команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override void onSend()
        {
            sendHttp();
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// выполнение команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected async void sendHttp()
        {
            try
            {
                using (var data = await network.http.GetStreamAsync(mUrl))
                {
                    mStream = new MemoryStream();
                    byte[] buffer = new byte[1024];
                    while (true)
                    {
                        var i = data.Read(buffer, 0, buffer.Length);
                        if (i == 0)
                        {
                            break;
                        }
                        mStream.Write(buffer, 0, i);
                    }
                    mStream.Position = 0;
                    executeCompleted();
                }
            }
            catch (Exception e)
            {
                executeError(e.Message);
            }
        }
        ///--------------------------------------------------------------------------------------










         ///=====================================================================================
        ///
        /// <summary>
        /// очистить всю команду
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override void onClear()
        {
            mStream = null;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// возвартим результат работы команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Stream result
        {
            get
            {
                return mStream;
            }
        }
        ///--------------------------------------------------------------------------------------






    }
}
