#region Using framework
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
#endregion





namespace Pluton.SystemProgram.Devices
{
    ///--------------------------------------------------------------------------------------
    ///--------------------------------------------------------------------------------------





     ///=====================================================================================
    ///
    /// <summary>
    /// Система работы с интернет сервером
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public class ANetworkWeb
                    : IDisposable
    {
        ///--------------------------------------------------------------------------------------
        private static readonly int cTimeOut = 10000; //время которое ждем для следующей попытки выполнениня запроса
        ///--------------------------------------------------------------------------------------


    


        ///--------------------------------------------------------------------------------------
        private readonly List<string>   mErrors     = new List<string>(); //пул последних ошибок рабты с сервером
        
        
        private readonly HttpClient     mHttpClient = null;     //управляющий поток сервера
        private readonly List<AQuery>   mPool       = new List<AQuery>(); //пулл выполняемых команд
        private bool                    mBussy      = false;    //идет выполнение запроса

        private TimeSpan                mTimeWait   = TimeSpan.Zero;  //время которое ждем, после ошибки, повторный запуск
        private bool                    mWait       = false;          //флаг того что будем ждать 


        private TimeSpan                mTimeoutWait    = TimeSpan.Zero; //таймайт выполнения команды
        private bool                    mTimeout        = false;


        private AQuery                  mAuthorization  = null; //авторизация на сервере если поддерживается
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Constructor
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public ANetworkWeb()
        {
            mHttpClient = new HttpClient();
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// освобождение данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void Dispose()
        {
            mHttpClient.Dispose();
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// установка системы авторизации на сервере
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AQuery authorization
        {
            get
            {
                return mAuthorization;
            }
            set
            {
                mAuthorization = value;
            }
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// передача данных серверу
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void send(AQuery command)
        {
            command.sendQueue();
            mPool.Add(command);
            executeCommand();
        }
        ///--------------------------------------------------------------------------------------











        ///=====================================================================================
        ///
        /// <summary>
        /// начало выполнения сообщения
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        private void executeCommand()
        {
            mWait = false; //ждать для отправки ненужно
            
            //авторизация на сервере если есть
            if (mAuthorization != null && !mAuthorization.isCompleted())
            {
                if (!mAuthorization.isExecute())
                {
                    mAuthorization.send(this);
                }
                return;
            }
            //


            if (mPool.Count == 0 || mBussy)
            {
                return;
            }

            mBussy = true;
            AQuery cmd = mPool[0];
            mPool.Remove(cmd);
            cmd.send(this);
            startTimeout();
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// завершение загрузки на сервер
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        /*
        private void evCommandCompleted(object sender, UploadStringCompletedEventArgs e)
        {
            AWebQuery cmd = e.UserState as AWebQuery;
            if (cmd == null && e.UserState is ANetworkWeb)
            {
                mLoginAth = false;
                if (e.Error != null)
                {
                    waitExecute();
                    return;
                }
                AWebParameters param = new AWebParameters(e.Result);
                mDeviceID = param.keyInteger("deviceID", mDeviceID);
                if (mDeviceID == 0)
                {
                    waitExecute();
                    return;
                }
                executeCommand();
                return;
            }

            if (e.Error != null)
            {
                if (cmd.sendQueue() < 10)
                {
                    mPool.Insert(0, cmd);
                }
                waitExecute();
                return;
            }
            cmd.execute(e.Result);
            executeCommand();
        }
        ///--------------------------------------------------------------------------------------
        */




         ///=====================================================================================
        ///
        /// <summary>
        /// ждем, чтобы снова выполнить попытку отправки данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void waitExecute()
        {
            mTimeout = false;
            mBussy = false;
            mWait = true;
            mTimeWait = TimeSpan.Zero;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// следующее выполнение данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void nextExecute()
        {
            mTimeout = false;
            mBussy = false;
            mWait = true;
            mTimeWait = TimeSpan.FromMilliseconds(cTimeOut - 500);
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// режим ожидания выполнения команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected void startTimeout()
        {
            mTimeout = true;
            mTimeoutWait = TimeSpan.Zero;
        }
        ///--------------------------------------------------------------------------------------




        ///=====================================================================================
        ///
        /// <summary>
        /// ждать для повторной отпавки данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void update(TimeSpan gameTime)
        {
            if (mWait)
            {
                mTimeWait += gameTime;
                if (mTimeWait.TotalMilliseconds > cTimeOut)
                {
                    executeCommand();
                }
            }

            if (mTimeout)
            {
                mTimeoutWait += gameTime;
                if (mTimeoutWait.TotalMilliseconds > cTimeOut)
                {
                    nextExecute();
                }
            }
        }
        ///--------------------------------------------------------------------------------------





      



        ///=====================================================================================
        ///
        /// <summary>
        /// возвратим ьранспорт передачи данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public HttpClient http
        {
            get
            {
                return mHttpClient;
            }
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// добавление ошибки в пулл
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void addError(string error)
        {
            mErrors.Add(error);
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Очищение пула ошибобк
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void clearError()
        {
            mErrors.Clear();
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Последняя ошибка
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public string lastError
        {
            get
            {
                if (mErrors.Count == 0)
                {
                    return null;
                }
                return mErrors[mErrors.Count - 1];
            }
        }
        ///--------------------------------------------------------------------------------------







    }
}
