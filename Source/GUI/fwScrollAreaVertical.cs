#region Using framework
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
#endregion


#if RENDER_DEBUG
using System.Diagnostics;
#endif


namespace Pluton.GUI
{
    ///------------------------------------------------------------------------------------------
    using Pluton;
    using Pluton.SystemProgram;
    using Pluton.SystemProgram.Devices;
    ///------------------------------------------------------------------------------------------







     ///=========================================================================================
    ///
    /// <summary>
    /// GUI контрол
    /// горизонтальный список прокрутки
    /// </summary>
    /// 
    ///------------------------------------------------------------------------------------------
    public class AScrollAreaVertical
                :
                    AScrollVertical
    {

        ///--------------------------------------------------------------------------------------
        private List<AWidget>   mItem = new List<AWidget>();//привязанные элементы
        private int             mItemHeight = 0; //максимальный размер контролов в списке


        /// количество столбцов
        private int     mColCount = 1;
        private int     mHorizontalSpacing = 0; //отступы между горизонтальными элементами
        private bool    mAutoCenter = false; //автоцентрирование по вертикали
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// Конструктор
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AScrollAreaVertical(AWidget parent)
            :
            base(parent, 0, 0, 0, 0)
        {
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Конструктор
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AScrollAreaVertical(AWidget parent, int left, int top, int width, int height)
            :
            base(parent, left, top, width, height)
        {
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Удалить все данные
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void removeAll()
        {
            mItem.Clear();
            refresh();
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// Удалить все данные
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void removeItem(AWidget item)
        {
            mItem.Remove(item);
            refresh();
        }
        ///--------------------------------------------------------------------------------------



         ///=====================================================================================
        ///
        /// <summary>
        /// Добавление в список виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void addItem(AWidget item)
        {
            mItem.Add(item);
            if (item.height > mItemHeight)
            {
                mItemHeight = item.height;
            }
            refresh();
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Количество элементов
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int countItem
        {
            get
            {
                return mItem.Count;
            }
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Возвратим элемент по его индексу
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget item(int index)
        {
            return (index >= 0 && index < mItem.Count) ? mItem[index] : null;
        }
        ///--------------------------------------------------------------------------------------











         ///=====================================================================================
        ///
        /// <summary>
        /// поиск виджетов потомков
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override AWidget onFindChilds(string name)
        {
            AWidget find = base.onFindChilds(name);
            if (find == null)
            {
                foreach (AWidget child in mItem)
                {
                    find = child.findWidgetName(name);
                    if (find != null)
                    {
                        return find;
                    }
                }
            }
            return find;

        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Скроллируем в указанную позицию
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void scrollToIndex(int index)
        {
            scrollCenter(index / (mColCount == 0 ? 1 : mColCount));
        }
        ///--------------------------------------------------------------------------------------








 
         ///=====================================================================================
        ///
        /// <summary>
        /// Установка количества колонок
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setColCount(int colCount)
        {
            mColCount = colCount;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// расстояние между элементами
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int horizontalSpacing
        {
            get
            {
                return mHorizontalSpacing;
            }
            set
            {
                mHorizontalSpacing = value;
            }
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// автоматическое центирование по вертикали, для одного элемента
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool autoCenter
        {
            get
            {
                return mAutoCenter;
            }
            set
            {
                mAutoCenter = value;
            }
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Ширина текстовой строчки
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override int onItemHeight()
        {
            return mItemHeight;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// Количество строчек
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override int onItemCount()
        {
            int iCount = mItem.Count / mColCount;
            if ((mItem.Count % mColCount) != 0)
            {
                iCount++;
            }
            return iCount;
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// Отрисовка контрола с учетом располжения родителя
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override void onRenderItem(ASpriteBatch spriteBatch, Rectangle rect, int index)
        {
            int id = index * mColCount;
            for (int i = 0; i < mColCount; i++)
            {
                if (id >= mItem.Count)
                {
                    break;
                }
                AWidget item = mItem[id];
                item.render(spriteBatch);
                id++;
            }
            //spriteBatch.primitives.drawBorder(rect, 2, Color.Blue);
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// опрос одного элемента
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override bool onHandleInputItem(AInputDevice input, int index)
        {
#if RENDER_DEBUG
            Debug.WriteLine("index - " + index.ToString());
#endif
            
            bool okInput = false;
            if (index >= 0)
            {

                int id = index * mColCount;
                for (int i = 0; i < mColCount; i++)
                {
                    if (id >= mItem.Count)
                    {
                        break;
                    }
                    AWidget item = mItem[id];
                    if (item.onHandleInput(input))
                    {
                        return true;
                    }
                    id++;
                }
            }
            else
            {
                input.release();
                foreach (AWidget obj in mItem)
                {
                    if (obj.onHandleInput(input))
                    {
                        okInput = true;
                    }
                }
            }
            return okInput;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// изменение размеров одного элемента
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected override void onUpdatePositionItem(Rectangle rectItem, int index)
        {
            int iTop = rectItem.Top;

            if (mColCount == 1)
            {
                int frameWidth = contentWidth;
                int iiLeft = rectItem.Left;

                AWidget item = mItem[index];

                if (mAutoCenter)
                {
                    iiLeft = (frameWidth - item.width) / 2 + rectItem.Left;
                }

                item.left = iiLeft;
                item.top = iTop;
                return;
            }



            int id = index * mColCount;
            int iLeft = rectItem.Left;
            for (int i = 0; i < mColCount; i++)
            {
                if (id >= mItem.Count)
                {
                    break;
                }
                AWidget item = mItem[id];
                int iWidth = item.width;
                item.left = iLeft;
                item.top = iTop;

                iLeft += iWidth + mHorizontalSpacing;
                id++;
            }
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Скроллинг на предыдущий лот
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void scrollPrev()
        {
            int iBegin = 0;
            int iEnd = 0;
            visibleIndex(ref iBegin, ref iEnd);

            if (iBegin < 0)
            {
                return;
            }

            int idx = iBegin + (iEnd - iBegin) / 2;
            idx--;
            if (idx >= 0 && idx < onItemCount())
            {
                scrollCenterMove(idx);
            }
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// Скроллинг на последующий лот
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void scrollNext()
        {
            int iBegin = 0;
            int iEnd = 0;
            visibleIndex(ref iBegin, ref iEnd);

            if (iEnd >= onItemCount())
            {
                return;
            }

            int idx = iBegin + (iEnd - iBegin) / 2;
            idx++;
            if (idx >= 0 && idx < onItemCount())
            {
                scrollCenterMove(idx);
            }
        }
        ///--------------------------------------------------------------------------------------



    }
}
