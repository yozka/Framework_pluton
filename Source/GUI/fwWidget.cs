#region Using framework
using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
#endregion



namespace Pluton.GUI
{
    using Pluton;
    using Pluton.SystemProgram;
    using Pluton.SystemProgram.Devices;






    ///--------------------------------------------------------------------------------------
    public delegate void eventVoid();
    ///--------------------------------------------------------------------------------------







    ///=========================================================================================
    ///
    /// <summary>
    /// Базовый контрол для GUI
    /// </summary>
    /// 
    ///------------------------------------------------------------------------------------------
    public class AWidget
    {

        ///--------------------------------------------------------------------------------------
        private string  mNameWidget = null; //название виджета
        private AWidget mParent = null; // родитель

        private int m_left = 0;                         // расположение относительно родителя
        private int m_top = 0;
        private int m_width = 0;
        private int m_height = 0;


        //внутренние отступы для контента
        private int m_marginLeft = 0;
        private int m_marginTop = 0;
        private int m_marginRight = 0;
        private int m_marginBottom = 0;


        private bool m_mutexResize = false;             //признак того что идут изменение размеров и полжение
        ///--------------------------------------------------------------------------------------



        private float mAlpha = -1.0f; //прозрачность
        protected bool m_visible = true;                // признак показа кнопки
        private bool mCustomDraw = false;       //признак ручной отрисовки
        ///--------------------------------------------------------------------------------------








        ///=====================================================================================
        ///
        /// <summary>
        /// constructor 1
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget()
        {
            mParent = null;
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// constructor 2
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget(AWidget parent)
        {
            mParent = parent;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// constructor 3
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget(AWidget parent, int left, int top, int width, int height)
        {
            mParent = parent;
            m_left = left;
            m_top = top;
            m_width = width;
            m_height = height;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// возвратим родителя
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget parent
        {
            get
            {
                return mParent;
            }
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// установка родителя
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setParent(AWidget parent)
        {
            if (mParent != null && parent != null)
            {
                throw new ArgumentException("У виджета уже есть родитель", "original");
            }
            mParent = parent;
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// установка название виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setNameWidget(string name)
        {
            mNameWidget = name;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// прозрачность
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public float alpha
        {
            get
            {
                if (mAlpha < 0)
                {

                    return mParent != null ? mParent.alpha : 1.0f;
                }

                return mAlpha;
            }
            set
            {
                mAlpha = MathHelper.Clamp(value, 0, 1);
            }
        }
        ///--------------------------------------------------------------------------------------




        ///=====================================================================================
        ///
        /// <summary>
        /// экранные координаты прямоугольника
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Rectangle screenRect
        {
            get
            {
                return new Rectangle(parentLeft + m_left, parentTop + m_top, m_width, m_height);
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// экранные центра виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Point screenCenter
        {
            get
            {
                return new Point(parentLeft + m_left + m_width / 2, parentTop + m_top + m_height / 2);
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// экранные координаты верхней точки
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int screenTop
        {
            get
            {
                return parentTop + m_top;
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// экранные координаты слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int screenLeft
        {
            get
            {
                return parentLeft + m_left;
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// экранные координаты верхней точки
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Vector2 screenLeftTop
        {
            get
            {
                return new Vector2(parentLeft + m_left, parentTop + m_top);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// экранные координаты справа
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int screenRight
        {
            get
            {
                return parentLeft + m_left + m_width;
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета родительского виджета слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected int parentLeft
        {
            get
            {
                return mParent == null ? 0 : mParent.parentLeft + mParent.m_left + mParent.m_marginLeft;
            }
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета родительского виджета слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected int parentTop
        {
            get
            {
                return mParent == null ? 0 : mParent.parentTop + mParent.m_top + mParent.m_marginTop;
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение отступов
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setMargin(int marginLeft, int marginRight, int marginTop, int marginBottom)
        {
            m_marginLeft = marginLeft;
            m_marginRight = marginRight;
            m_marginTop = marginTop;
            m_marginBottom = marginBottom;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// расположение отступов
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setMargin(int marginAll)
        {
            setMargin(marginAll, marginAll, marginAll, marginAll);
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// размер прямоугольника где вписывается контент
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Rectangle contentRect
        {
            get
            {
                return new Rectangle(0, 0, m_width - m_marginLeft - m_marginRight, m_height - m_marginTop - m_marginBottom);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// размер по горизонтале где вписывается контент
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int contentWidth
        {
            get
            {
                return m_width - m_marginLeft - m_marginRight;
            }
            set
            {
                m_width = value + m_marginLeft + m_marginRight;
                resize(false, false, true, false);
            }
        }
        ///--------------------------------------------------------------------------------------





        


        ///=====================================================================================
        ///
        /// <summary>
        /// размер по вертикале где вписывается контент
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int contentHeight
        {
            get
            {
                return m_height - m_marginTop - m_marginBottom;
            }
            set
            {
                m_height = value + m_marginTop + m_marginBottom;
                resize(false, false, false, true);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// расположени потомков с верху
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int contentTop
        {
            get
            {
                return m_marginTop;
            }
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// расположени потомков с верху и слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Vector2 contentLeftTop
        {
            get
            {
                return new Vector2(m_marginLeft, m_marginTop);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// позиция виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Point pos
        {
            get
            {
                return new Point(m_left, m_top);
            }
            set
            {
                m_left = value.X;
                m_top = value.Y;
                resize(true, true, false, false);
            }
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// центральная позиция виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Point posCenter
        {
            get
            {
                return new Point(m_left + m_width / 2, m_top + m_height / 2);
            }
            set
            {
                m_left = value.X - m_width / 2;
                m_top = value.Y - m_height / 2;
                resize(true, true, false, false);
            }
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// размер виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Point size
        {
            get
            {
                return new Point(m_width, m_height);
            }
            set
            {
                m_width = value.X;
                m_height = value.Y;
                resize(false, false, true, true);
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// прямоугольник виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Rectangle rect
        {
            get
            {
                return new Rectangle(m_left, m_top, m_width, m_height);
            }
            set
            {
                m_left = value.Left;
                m_top = value.Top;
                m_width = value.Width;
                m_height = value.Height;
                resize(true, true, true, true);
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int left
        {
            get
            {
                return m_left;
            }
            set
            {
                m_left = value;
                resize(true, false, false, false);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setLeft(int value)
        {
            left = value;
            return this;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// задать ширину виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setWidth(int value)
        {
            width = value;
            return this;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета справа координата
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int right
        {
            get
            {
                return m_left + m_width;
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета сверху
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int top
        {
            get
            {
                return m_top;
            }
            set
            {
                m_top = value;
                resize(false, true, false, false);
            }
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета сверху
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setTop(int value)
        {
            top = value;
            return this;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета снизу
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int bottom
        {
            get
            {
                return m_top + m_height;
            }
            set
            {
                m_top = value - m_height;
                resize(false, true, false, false);
            }
        }
        ///--------------------------------------------------------------------------------------




        
         ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setPosition(int iLeft, int iTop)
        {
            m_left = iLeft;
            m_top = iTop;
            resize(true, true, false, false);
            return this;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setPosition(int iLeft, int iTop, int iWidth, int iHeight)
        {
            m_left = iLeft;
            m_top = iTop;
            m_width = iWidth;
            m_height = iHeight;
            resize(true, true, true, true);
            return this;
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// расположение виджета 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget setPosition(Rectangle rect)
        {
            m_left = rect.Left;
            m_top = rect.Top;
            m_width = rect.Width;
            m_height = rect.Height;
            resize(true, true, true, true);
            return this;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// ширина виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int width
        {
            get
            {
                return m_width;
            }
            set
            {
                m_width = value;
                resize(false, false, true, false);
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// высота виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int height
        {
            get
            {
                return m_height;
            }
            set
            {
                m_height = value;
                resize(false, false, false, true);
            }
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// отступ слева
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int marginLeft
        {
            get
            {
                return m_marginLeft;
            }
            set
            {
               m_marginLeft = value;
            }
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// отступ сверху
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int marginTop
        {
            get
            {
                return m_marginTop;
            }
            set
            {
                m_marginTop = value;
            }
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// изменение размеров и позиция виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual void onResize(bool changeLeft, bool changeTop, bool changeWidth, bool changeHeight)
        {

        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// изменение размеров и позиция виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void resize()
        {
            resize(true, true, true, true);
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// изменение размеров и позиция виджета
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected void resize(bool changeLeft, bool changeTop, bool changeWidth, bool changeHeight)
        {
            if (!m_mutexResize)
            {
                m_mutexResize = true;
                onResize(changeLeft, changeTop, changeWidth, changeHeight);
                m_mutexResize = false;
            }
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// показывать или не показывать виджет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool visible
        {
            set { 
                    m_visible = onVisible(value); 
                }
            get { return m_visible; }
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// показывать или не показывать виджет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual bool onVisible(bool value)
        {
            return value;
        }
        ///--------------------------------------------------------------------------------------

        






         ///=====================================================================================
        ///
        /// <summary>
        /// отрисовывать или не отрисовывать виджет
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool customDraw
        {
            set { mCustomDraw = value; }
            get { return mCustomDraw; }
        }
        ///--------------------------------------------------------------------------------------



        ///=====================================================================================
        ///
        /// <summary>
        /// Отрисовка контрола
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void render(ASpriteBatch spriteBatch)
        {
            var rect = new Rectangle(
                                parentLeft + m_left,
                                parentTop + m_top,
                                m_width,
                                m_height);
            onRender(spriteBatch, rect);



            //отрисуем тестовую обводку
#if RENDER_DEBUG
            if (AInputDevice.testRenderDebug)
            {
                spriteBatch.flush();
                spriteBatch.primitives.drawBorder(rect, 2, Color.HotPink);
            }
            //
#endif  

        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// Отрисовка контрола в указанных координатах
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void renderTo(ASpriteBatch spriteBatch, Rectangle rect)
        {
            onRender(spriteBatch, rect);
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// Отрисовка контрола с учетом располжения родителя
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual void onRender(ASpriteBatch spriteBatch, Rectangle rect)
        {

        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// Обновление логики у контрола
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public virtual void onUpdate(TimeSpan gameTime)
        {
        }
        ///--------------------------------------------------------------------------------------


        


        ///=====================================================================================
        ///
        /// <summary>
        /// обработка данных ввода с тачпада и кнопок, возвращаем true когда произошла обработка
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public virtual bool onHandleInput(AInputDevice input)
        {
            return false;
        }
        ///--------------------------------------------------------------------------------------





        ///=====================================================================================
        ///
        /// <summary>
        /// поиск виджета по его имени, это сам виджет, либо его потомков
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AWidget findWidgetName(string name)
        {
            if (name == mNameWidget)
            {
                return this;
            }
            return onFindChilds(name);
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// поиск виджетов потомков
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual AWidget onFindChilds(string name)
        {
            return null;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// Виджет добавлен во фрейм
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void addToFrame(AFrame frame)
        {
            onAddToFrame(frame);
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// Виджет добавлен во фрейм
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual void onAddToFrame(AFrame frame)
        {

        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// Виджет уберается из фрейма
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void removeToFrame(AFrame frame)
        {
            onRemoveToFrame(frame);
        }
        ///--------------------------------------------------------------------------------------








        ///=====================================================================================
        ///
        /// <summary>
        /// Виджет уберается из фрейма
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected virtual void onRemoveToFrame(AFrame frame)
        {

        }
        ///--------------------------------------------------------------------------------------

    }
}
