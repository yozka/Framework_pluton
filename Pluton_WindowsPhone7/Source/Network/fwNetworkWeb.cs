#region Using framework
using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using System.IO;
#endregion





namespace Pluton.SystemProgram.Devices
{
    ///--------------------------------------------------------------------------------------
    ///--------------------------------------------------------------------------------------





     ///=====================================================================================
    ///
    /// <summary>
    /// Система работы с интернет сервером
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public class ANetworkWeb
    {
        ///--------------------------------------------------------------------------------------
        private static readonly int cTimeOut = 10000; //время которое ждем для следующей попытки выполнениня запроса
        ///--------------------------------------------------------------------------------------


    


        ///--------------------------------------------------------------------------------------
        private readonly List<string>   mErrors     = new List<string>(); //пул последних ошибок рабты с сервером
        
        
        private readonly WebClient      mWebClient  = null;     //управляющий поток сервера
        private readonly List<AQuery>   mPool       = new List<AQuery>(); //пулл выполняемых команд
        private bool                    mBussy      = false;    //идет выполнение запроса

        private TimeSpan                mTimeWait   = TimeSpan.Zero;  //время которое ждем, после ошибки, повторный запуск
        private bool                    mWait       = false;          //флаг того что будем ждать 


        private TimeSpan                mTimeoutWait    = TimeSpan.Zero; //таймайт выполнения команды
        private bool                    mTimeout        = false;


        private AQuery                  mAuthorization  = null; //авторизация на сервере если поддерживается
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Constructor
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public ANetworkWeb()
        {
            mWebClient = new WebClient();
            mWebClient.UploadStringCompleted += evCommandCompleted;
            mWebClient.OpenReadCompleted += evBinaryCompleted;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// установка системы авторизации на сервере
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AQuery authorization
        {
            get
            {
                return mAuthorization;
            }
            set
            {
                mAuthorization = value;
            }
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// передача данных серверу
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void send(AQuery command)
        {
            command.sendQueue();
            mPool.Add(command);
            executeCommand();
        }
        ///--------------------------------------------------------------------------------------











        ///=====================================================================================
        ///
        /// <summary>
        /// начало выполнения сообщения
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        private void executeCommand()
        {
            if (mWebClient.IsBusy)
            {
                waitExecute();
                return;
            }
            
            mWait = false; //ждать для отправки ненужно
            
            //авторизация на сервере если есть
            if (mAuthorization != null && !mAuthorization.isCompleted())
            {
                if (!mAuthorization.isExecute())
                {
                    mAuthorization.send(this);
                }
                return;
            }
            //


            if (mPool.Count == 0 || mBussy)
            {
                return;
            }

            mBussy = true;
            AQuery cmd = mPool[0];
            mPool.Remove(cmd);
            cmd.send(this);
            startTimeout();
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// ждем, чтобы снова выполнить попытку отправки данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void waitExecute()
        {
            mTimeout = false;
            mBussy = false;
            mWait = true;
            mTimeWait = TimeSpan.Zero;
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// следующее выполнение данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void nextExecute()
        {
            mTimeout = false;
            mBussy = false;
            mWait = true;
            mTimeWait = TimeSpan.FromMilliseconds(cTimeOut - 500);
        }
        ///--------------------------------------------------------------------------------------






        ///=====================================================================================
        ///
        /// <summary>
        /// режим ожидания выполнения команды
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        protected void startTimeout()
        {
            mTimeout = true;
            mTimeoutWait = TimeSpan.Zero;
        }
        ///--------------------------------------------------------------------------------------




        ///=====================================================================================
        ///
        /// <summary>
        /// ждать для повторной отпавки данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void update(TimeSpan gameTime)
        {
            if (mWait)
            {
                mTimeWait += gameTime;
                if (mTimeWait.TotalMilliseconds > cTimeOut)
                {
                    executeCommand();
                }
            }

            if (mTimeout)
            {
                mTimeoutWait += gameTime;
                if (mTimeoutWait.TotalMilliseconds > 1000 * 60)
                {
                    nextExecute();
                }
            }
        }
        ///--------------------------------------------------------------------------------------





      



        ///=====================================================================================
        ///
        /// <summary>
        /// возвратим ьранспорт передачи данных
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public WebClient http
        {
            get
            {
                return mWebClient;
            }
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// добавление ошибки в пулл
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void addError(string error)
        {
            mErrors.Add(error);
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Очищение пула ошибобк
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void clearError()
        {
            mErrors.Clear();
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Последняя ошибка
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public string lastError
        {
            get
            {
                if (mErrors.Count == 0)
                {
                    return null;
                }
                return mErrors[mErrors.Count - 1];
            }
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// завершение загрузки на сервер
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void evCommandCompleted(object sender, UploadStringCompletedEventArgs e)
        {
            AQuery cmd = e.UserState as AQuery;
            if (cmd == null)
            {
                return;
            }

            if (e.Error == null)
            {
                cmd.onCompleted(e.Result);
            }
            else
            {
                cmd.onError(e.Error.Message);
            }
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// завершение загрузки на сервер
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        private void evBinaryCompleted(object sender, OpenReadCompletedEventArgs e)
        {
            AQuery cmd = e.UserState as AQuery;
            if (cmd == null)
            {
                return;
            }

            if (e.Error != null)
            {
                cmd.onError(e.Error.Message);
                return;
            }

            
            //загрузилось все норм
            //запишем все в буфер
            try
            {
                byte[] buffer = new byte[1024];
                Stream ss = new MemoryStream();
                while (true)
                {
                    int i = e.Result.Read(buffer, 0, buffer.Length);
                    if (i == 0)
                    {
                        break;
                    }
                    ss.Write(buffer, 0, i);
                }
                //
                ss.Position = 0;
                cmd.onCompleted(ss);
 
            }
            catch (Exception er)
            {
                cmd.onError(er.Message);
                return;
            }


            

        }
        ///--------------------------------------------------------------------------------------




    }
}
