#region Using framework
using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;
#endregion



namespace Pluton.SystemProgram
{
    ///--------------------------------------------------------------------------------------
    






     ///=====================================================================================
    ///
    /// <summary>
    /// Реализация потока, где данные сохроняются в памяти
    /// 
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public class AStreamMemory
                    :
                        IStream
    {
        ///--------------------------------------------------------------------------------------
        private readonly IStream            mParent     = null; //указатель на родителя
        private List<IStream>               mChilds     = null;

        private string                      mTypeName   = null; //название ветки, имя класса


        //запись локальных данных
        private Dictionary<string, Point>   mPoints     = null;
        private Dictionary<string, float>   mFloats     = null;
        private Dictionary<string, string>  mStrings    = null;
        private Dictionary<string, int>     mIntegers   = null;
        private Dictionary<string, uint>    mUIntegers  = null;
        private Dictionary<string, bool>    mBooleans   = null;
        private Dictionary<string, Vector2> mVectors    = null;
        private Dictionary<string, long>    mLongs      = null;
        private Dictionary<string, byte[]>  mBinarys     = null;
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// возвратим версию реализованного потока
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int getVersion()
        {
            return 29112015;
        }
        ///--------------------------------------------------------------------------------------


         




         ///=====================================================================================
        ///
        /// <summary>
        /// constructor ROOT
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AStreamMemory()
            :
            this(null)
        {
            
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// constructor 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public AStreamMemory(IStream parent)
        {
            mParent = parent;
        }
        ///--------------------------------------------------------------------------------------






  



         ///=====================================================================================
        ///
        /// <summary>
        /// возвратим имя потока. который привязан к классу
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public string getTypeName()
        {
            return mTypeName == null ? string.Empty : mTypeName;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// установим тип потока
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void setTypeName(string name)
        {
            mTypeName = name;
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// проверка, является ли данный поток пустым
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isEmpty()
        {
            return (mTypeName == null || mTypeName.Length == 0) ? true : false;

        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// возвратим тип обекта
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        private string typeToString(IMemberData obj)
        {
            Type tp = obj.GetType();
            string nm = tp.FullName;
            nm = nm.Replace(tp.Assembly.FullName, "");
            nm = nm.Replace(tp.Namespace, "");
            nm = nm.Replace("]", "");
            nm = nm.Replace("[", "");
            nm = nm.Replace(",", "");
            nm = nm.Replace(".", "");
            nm = nm.Replace("`", "");
            return nm;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// проверка, принадлежит ли поток к данному объекту
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool isEquals(IMemberData obj)
        {
            return typeToString(obj) == mTypeName ? true : false;
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Создать ветку
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public IStream creationChild()
        {
            if (mChilds == null)
            {
                mChilds = new List<IStream>();
            }
            AStreamMemory child = new AStreamMemory(this);
            mChilds.Add(child);
            return child;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Создать в текущем потоке объект
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void creation(IMemberData obj)
        {
            mTypeName = typeToString(obj);
        }
        ///--------------------------------------------------------------------------------------







        ///=====================================================================================
        ///
        /// <summary>
        /// поиск потоков у которых совпадают тип классов
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public IStream[] findChilds(IMemberData obj)
        {
            List<IStream> list = new List<IStream>();
            if (mChilds != null)
            {
                foreach (var child in mChilds)
                {
                    if (child.isEquals(obj))
                    {
                        list.Add(child);
                    }
                }
            }
            return list.ToArray();
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// возвратим список всех вложенных потоков
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public IStream[] getChilds()
        {
            if (mChilds != null)
            {
                return mChilds.ToArray();
            }
            return new IStream[0];
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Взять первопопавшийся поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public IStream getFirstChild()
        {
            return (mChilds != null && mChilds.Count > 0) ? mChilds[0] : null;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysPoint()
        {
            return mPoints != null ? new List<string>(mPoints.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Запись в текущий поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writePoint(string key, Point value)
        {
            if (mPoints == null)
            {
                mPoints = new Dictionary<string, Point>();
            }
            mPoints[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение из потока 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Point readPoint(string key, Point defaultValue)
        {
            return mPoints != null && mPoints.ContainsKey(key) ? mPoints[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysFloat()
        {
            return mFloats != null ? new List<string>(mFloats.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Запись в текущий поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeFloat(string key, float value)
        {
            if (mFloats == null)
            {
                mFloats = new Dictionary<string, float>();
            }
            mFloats[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение из потока 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public float readFloat(string key, float defaultValue)
        {
            return mFloats != null && mFloats.ContainsKey(key) ? mFloats[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysString()
        {
            return mStrings != null ? new List<string>(mStrings.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Запись строчек
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeString(string key, string value)
        {
            if (mStrings == null)
            {
                mStrings = new Dictionary<string, string>();
            }
            mStrings[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение строчек
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public string readString(string key, string defaultValue)
        {
            return mStrings != null && mStrings.ContainsKey(key) ? mStrings[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysInteger()
        {
            return mIntegers != null ? new List<string>(mIntegers.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Запись целочисленных значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeInteger(string key, int value)
        {
            if (mIntegers == null)
            {
                mIntegers = new Dictionary<string, int>();
            }
            mIntegers[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение целочисленных значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public int readInteger(string key, int defaultValue)
        {
            return mIntegers != null && mIntegers.ContainsKey(key) ? mIntegers[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------











         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей целочисленных значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysUInteger()
        {
            return mUIntegers != null ? new List<string>(mUIntegers.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Запись целочисленных безнаковых значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeUInteger(string key, uint value)
        {
            if (mUIntegers == null)
            {
                mUIntegers = new Dictionary<string, uint>();
            }
            mUIntegers[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение целочисленных безнаковых значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public uint readUInteger(string key, uint defaultValue)
        {
            return mUIntegers != null && mUIntegers.ContainsKey(key) ? mUIntegers[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysBoolean()
        {
            return mBooleans != null ? new List<string>(mBooleans.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------








         ///=====================================================================================
        ///
        /// <summary>
        /// Запись булевых значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeBoolean(string key, bool value)
        {
            if (mBooleans == null)
            {
                mBooleans = new Dictionary<string, bool>();
            }
            mBooleans[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение булевых значений
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public bool readBoolean(string key, bool defaultValue)
        {
            return mBooleans != null && mBooleans.ContainsKey(key) ? mBooleans[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysVector2()
        {
            return mVectors != null ? new List<string>(mVectors.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Запись в текущий поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeVector2(string key, Vector2 value)
        {
            if (mVectors == null)
            {
                mVectors = new Dictionary<string, Vector2>();
            }
            mVectors[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение из потока 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public Vector2 readVector2(string key, Vector2 defaultValue)
        {
            return mVectors != null && mVectors.ContainsKey(key) ? mVectors[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysLong()
        {
            return mLongs != null ? new List<string>(mLongs.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Запись в текущий поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeLong(string key, long value)
        {
            if (mLongs == null)
            {
                mLongs = new Dictionary<string, long>();
            }
            mLongs[key] = value;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение из потока 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public long readLong(string key, long defaultValue)
        {
            return mLongs != null && mLongs.ContainsKey(key) ? mLongs[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Список всех ключей
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public List<string> keysBinary()
        {
            return mBinarys != null ? new List<string>(mBinarys.Keys) : new List<string>();
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Запись в текущий поток
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public void writeBinary(string key, byte[] value)
        {
            if (mBinarys == null)
            {
                mBinarys = new Dictionary<string, byte[]>();
            }

            int size = value.Length;
            byte[] bin = new byte[size];
            for (int i = 0; i < size; i++)
            {
                bin[i] = value[i];
            }
            mBinarys[key] = bin;
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// чтение из бинарных данных 
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public byte[] readBinary(string key, byte[] defaultValue)
        {
            return mBinarys != null && mBinarys.ContainsKey(key) ? mBinarys[key] : defaultValue;
        }
        ///--------------------------------------------------------------------------------------



    }
}
