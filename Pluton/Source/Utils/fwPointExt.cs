#region Using framework
using System;
using Microsoft.Xna.Framework;
#endregion
///--------------------------------------------------------------------------------------

namespace Pluton
{




     ///=====================================================================================
    ///
    /// <summary>
    /// структура описания точки
    /// </summary>
    /// 
    ///--------------------------------------------------------------------------------------
    public static class pointExt
    {


        
        public static Vector2 toVector2(this Point value)
        {
            return new Vector2(value.X, value.Y);
        }


        public static Point toPoint(this Vector2 value)
        {
            return new Point((int)value.X, (int)value.Y);
        }


        public static Vector3 toVector3(this Vector2 value)
        {
            return new Vector3(value.X, value.Y, 0.0f);
        }



        public static bool isZero(this Vector2 value)
        {
            return (value.X == 0 && value.Y == 0) ? true : false;
        }




        public static Point toPoint(this int value)
        {
            return new Point(value, value);
        }


        public static bool isEmpty(this Point value)
        {
            return value.X == -1 && value.Y == -1;
        }


        public static bool isZero(this Point value)
        {
            return value.X == 0 && value.Y == 0;
        }





         ///=====================================================================================
        ///
        /// <summary>
        /// Проверяет, лежит ли данная точка в указанном прямоугольнике
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static bool isContainsRectangle(this Point this_, int x, int y, int width, int height)
        {
            return this_.X >= x && this_.X < x + width
                    && this_.Y >= y && this_.Y < y + height;
        }
        ///--------------------------------------------------------------------------------------




        public static Point empty()
        {
            return new Point(-1, -1);
        }







         ///=====================================================================================
        ///
        /// <summary>
        /// расстояние между двумя точками
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static int getDistanceSquared(this Point this_,  Point point)
        {
            int dx = this_.X - point.X;
            int dy = this_.Y - point.Y;
            return (dx * dx) + (dy * dy);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Сложение чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point add (this Point this_, Point value)
        {
            return new Point(this_.X + value.X, this_.Y + value.Y);
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Сложение чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point add(Point this_, Vector2 value)
        {
            return new Point(this_.X + (int)value.X, this_.Y + (int)value.Y);
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// Сложение чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point add(this Point this_, int value)
        {
            return new Point(this_.X + value, this_.Y + value);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Сложение чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point add(this Point this_, int x, int y)
        {
            return new Point(this_.X + x, this_.Y + y);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// вычитание чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point sub(this Point this_, int value)
        {
            return new Point(this_.X - value, this_.Y - value);
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// вычитание чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point sub(Point this_, float value)
        {
            return new Point(this_.X - (int)value, this_.Y - (int)value);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// вычитание чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point sub(this Point this_, Point value)
        {
            return new Point(this_.X - value.X, this_.Y - value.Y);
        }
        ///--------------------------------------------------------------------------------------




         ///=====================================================================================
        ///
        /// <summary>
        /// вычитание чисел
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point sub(Point this_, Vector2 value)
        {
            return new Point(this_.X - (int)value.X, this_.Y - (int)value.Y);
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// Разделить на целое число
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point div(this Point this_, int value)
        {
            return new Point(this_.X / value, this_.Y / value);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Разделить на вещественное число
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point div(Point this_, float value)
        {
            return new Point((int)(this_.X / value), (int)(this_.Y / value));
        }
        ///--------------------------------------------------------------------------------------







         ///=====================================================================================
        ///
        /// <summary>
        /// Умножение на int
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point multiply(this Point this_, int value)
        {
            return new Point(this_.X * value, this_.Y * value);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Умножение на float
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point multiply(Point this_, float value)
        {
            return new Point((int)(this_.X * value), (int)(this_.Y * value));
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Остаток от деления
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point mod(Point this_, int value)
        {
            return new Point(this_.X % value, this_.Y % value);
        }
        ///--------------------------------------------------------------------------------------






         ///=====================================================================================
        ///
        /// <summary>
        /// Остаток от деления
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Point mod(Point this_, float value)
        {
            return new Point(this_.X % (int)value, this_.Y % (int)value);
        }
        ///--------------------------------------------------------------------------------------




      












        /*
        public static explicit operator Vector2(Point value)
        {
            return new Vector2(value.X, value.Y);
         * implicit
        }
         */

    }








    public static class MathExt
    {

         ///=====================================================================================
        ///
        /// <summary>
        /// вектор ротации между двумя углами
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static double rotation(double a, double b)
        {
            double dAngle = b - a;

            if (dAngle == 0)
            {
                return 0;
            }

            dAngle = dAngle % (Math.PI * 2);

	        //при переходе границы -180 и +180 градусов
        	if (dAngle > Math.PI) 
            {
		        dAngle = -Math.PI * 2 + dAngle;
	        } 
            else 
            if (dAngle < -Math.PI) 
            {
                dAngle = Math.PI * 2 + dAngle;
	        }

            return dAngle;
        }
        ///--------------------------------------------------------------------------------------





         ///=====================================================================================
        ///
        /// <summary>
        /// нормализация угла
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static double normalize(double angle)
        {
            if (angle == 0)
            {
                return 0;
            }
            angle = angle % (Math.PI * 2);
            return angle;
        }
        ///--------------------------------------------------------------------------------------









         ///=====================================================================================
        ///
        /// <summary>
        /// Сложение двух прямоугольников
        /// </summary>
        /// 
        ///--------------------------------------------------------------------------------------
        public static Rectangle add(this Rectangle this_, Rectangle value)
        {
            int iLeft = Math.Min(this_.X, value.X);
            int iTop = Math.Min(this_.Y, value.Y);
            int iRight = Math.Max(this_.X + this_.Width, value.X + value.Width);
            int iBottom = Math.Max(this_.Y + this_.Height, value.Y + value.Height);
            return new Rectangle(iLeft, iTop, iRight - iLeft, iBottom - iTop);
        }
        ///--------------------------------------------------------------------------------------










    }









}